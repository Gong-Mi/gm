# 工作流程名称
name: Android Build

# 触发工作流程的事件
on:
  push:
    branches: [ main, master ] # 当代码推送到 main 或 master 分支时触发
  pull_request:
    branches: [ main, master ] # 当有拉取请求到 main 或 master 分支时触发

# 定义作业
jobs:
  build:
    # 在 ubuntu 最新版 runner 上运行作业
    runs-on: ubuntu-latest

    # 作业步骤
    steps:
    - name: Checkout code
      # 使用 action/checkout@v4 检查代码到 runner 环境
      uses: actions/checkout@v4

    - name: Set up JDK 17
      # 设置 Java Development Kit，Android 开发需要
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin' # 选择一个 JDK 分发版，如 temurin
        java-version: '17'       # Android 开发通常需要 JDK 11 或更高，这里用 17

    - name: Setup Android SDK # 这个 step 可能不总是需要，因为 runner 可能自带，但明确写出更好
      # 如果 runner 不完全配置好 SDK，这个 step 可以帮助
      # 这里只是一个占位符，实际可能需要安装特定版本的 SDK components
      run: |
        echo "y" | ${ANDROID_HOME}/tools/bin/sdkmanager "platforms;android-34" "build-tools;34.0.0" # 示例，根据你的项目sdk版本调整
        echo "y" | ${ANDROID_HOME}/tools/bin/sdkmanager "cmdline-tools;latest"
        # 接受所有 SDK licenses
        echo "y" | ${ANDROID_HOME}/tools/bin/sdkmanager --licenses

    - name: Cache Gradle packages # 缓存 Gradle 依赖，加速后续构建
      uses: actions/cache@v4
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew # 授予 gradlew 脚本执行权限
      run: chmod +x gradlew

    - name: Build debug APK # 运行 Gradle 命令构建 debug 版本的 APK
      run: ./gradlew assembleDebug

    - name: Upload debug APK # 将构建生成的 APK 文件作为 artifact 上传
      uses: actions/upload-artifact@v4
      with:
        name: app-debug-apk
        path: app/build/outputs/apk/debug/app-debug.apk # 根据你的项目路径调整